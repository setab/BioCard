/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PatientPrescriptionsRouteImport } from './routes/patient/prescriptions'
import { Route as PatientHealthRecordsRouteImport } from './routes/patient/healthRecords'
import { Route as PatientDashboardRouteImport } from './routes/patient/dashboard'
import { Route as PatientAppoinmentsRouteImport } from './routes/patient/appoinments'
import { Route as PatientIdRouteImport } from './routes/patient/$id'
import { Route as DoctorDashboardRouteImport } from './routes/doctor/dashboard'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PatientPrescriptionsRoute = PatientPrescriptionsRouteImport.update({
  id: '/patient/prescriptions',
  path: '/patient/prescriptions',
  getParentRoute: () => rootRouteImport,
} as any)
const PatientHealthRecordsRoute = PatientHealthRecordsRouteImport.update({
  id: '/patient/healthRecords',
  path: '/patient/healthRecords',
  getParentRoute: () => rootRouteImport,
} as any)
const PatientDashboardRoute = PatientDashboardRouteImport.update({
  id: '/patient/dashboard',
  path: '/patient/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const PatientAppoinmentsRoute = PatientAppoinmentsRouteImport.update({
  id: '/patient/appoinments',
  path: '/patient/appoinments',
  getParentRoute: () => rootRouteImport,
} as any)
const PatientIdRoute = PatientIdRouteImport.update({
  id: '/patient/$id',
  path: '/patient/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const DoctorDashboardRoute = DoctorDashboardRouteImport.update({
  id: '/doctor/dashboard',
  path: '/doctor/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/doctor/dashboard': typeof DoctorDashboardRoute
  '/patient/$id': typeof PatientIdRoute
  '/patient/appoinments': typeof PatientAppoinmentsRoute
  '/patient/dashboard': typeof PatientDashboardRoute
  '/patient/healthRecords': typeof PatientHealthRecordsRoute
  '/patient/prescriptions': typeof PatientPrescriptionsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/doctor/dashboard': typeof DoctorDashboardRoute
  '/patient/$id': typeof PatientIdRoute
  '/patient/appoinments': typeof PatientAppoinmentsRoute
  '/patient/dashboard': typeof PatientDashboardRoute
  '/patient/healthRecords': typeof PatientHealthRecordsRoute
  '/patient/prescriptions': typeof PatientPrescriptionsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/doctor/dashboard': typeof DoctorDashboardRoute
  '/patient/$id': typeof PatientIdRoute
  '/patient/appoinments': typeof PatientAppoinmentsRoute
  '/patient/dashboard': typeof PatientDashboardRoute
  '/patient/healthRecords': typeof PatientHealthRecordsRoute
  '/patient/prescriptions': typeof PatientPrescriptionsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/admin/dashboard'
    | '/doctor/dashboard'
    | '/patient/$id'
    | '/patient/appoinments'
    | '/patient/dashboard'
    | '/patient/healthRecords'
    | '/patient/prescriptions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/admin/dashboard'
    | '/doctor/dashboard'
    | '/patient/$id'
    | '/patient/appoinments'
    | '/patient/dashboard'
    | '/patient/healthRecords'
    | '/patient/prescriptions'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/admin/dashboard'
    | '/doctor/dashboard'
    | '/patient/$id'
    | '/patient/appoinments'
    | '/patient/dashboard'
    | '/patient/healthRecords'
    | '/patient/prescriptions'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  DoctorDashboardRoute: typeof DoctorDashboardRoute
  PatientIdRoute: typeof PatientIdRoute
  PatientAppoinmentsRoute: typeof PatientAppoinmentsRoute
  PatientDashboardRoute: typeof PatientDashboardRoute
  PatientHealthRecordsRoute: typeof PatientHealthRecordsRoute
  PatientPrescriptionsRoute: typeof PatientPrescriptionsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patient/prescriptions': {
      id: '/patient/prescriptions'
      path: '/patient/prescriptions'
      fullPath: '/patient/prescriptions'
      preLoaderRoute: typeof PatientPrescriptionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patient/healthRecords': {
      id: '/patient/healthRecords'
      path: '/patient/healthRecords'
      fullPath: '/patient/healthRecords'
      preLoaderRoute: typeof PatientHealthRecordsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patient/dashboard': {
      id: '/patient/dashboard'
      path: '/patient/dashboard'
      fullPath: '/patient/dashboard'
      preLoaderRoute: typeof PatientDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patient/appoinments': {
      id: '/patient/appoinments'
      path: '/patient/appoinments'
      fullPath: '/patient/appoinments'
      preLoaderRoute: typeof PatientAppoinmentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patient/$id': {
      id: '/patient/$id'
      path: '/patient/$id'
      fullPath: '/patient/$id'
      preLoaderRoute: typeof PatientIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/doctor/dashboard': {
      id: '/doctor/dashboard'
      path: '/doctor/dashboard'
      fullPath: '/doctor/dashboard'
      preLoaderRoute: typeof DoctorDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  DoctorDashboardRoute: DoctorDashboardRoute,
  PatientIdRoute: PatientIdRoute,
  PatientAppoinmentsRoute: PatientAppoinmentsRoute,
  PatientDashboardRoute: PatientDashboardRoute,
  PatientHealthRecordsRoute: PatientHealthRecordsRoute,
  PatientPrescriptionsRoute: PatientPrescriptionsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
